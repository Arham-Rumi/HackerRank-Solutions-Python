--------------------------------------- Problem ---------------------------------------
There will be two arrays of integers. Determine all integers that satisfy the following two conditions:

    The elements of the first array are all factors of the integer being considered
    The integer being considered is a factor of all elements of the second array

These numbers are referred to as being between the two arrays. Determine how many such numbers exist.

--------------------------------------- Solution ---------------------------------------



#!/bin/python3

import math
import os
import random
import re
import sys
from functools import reduce
from fractions import gcd

#
# Complete the 'getTotalX' function below.
#
# The function is expected to return an INTEGER.
# The function accepts following parameters:
#  1. INTEGER_ARRAY a
#  2. INTEGER_ARRAY b
#

def getGCD(a, b):
    while a % b != 0:
        a, b = b, (a % b)
    return b

    
def getLCM(a, b):
    return (a * b // getGCD(a, b))

def getTotalX(a, b):
    # Write your code here
    
    b_gcd = reduce(getGCD, b) # Getting a single value GCD for array b   
    a_lcm = reduce(getLCM, a) # Getting a single value LCM for array a
    
    considered_nums = []
    
    for x in range(a_lcm, b_gcd+1, a_lcm):
        if b_gcd % x == 0:
            considered_nums.append(x)
            
    total = len(considered_nums)
 
    return total

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    first_multiple_input = input().rstrip().split()

    n = int(first_multiple_input[0])

    m = int(first_multiple_input[1])

    arr = list(map(int, input().rstrip().split()))

    brr = list(map(int, input().rstrip().split())) 

    total = getTotalX(arr, brr)

    fptr.write(str(total) + '\n')

    fptr.close()
